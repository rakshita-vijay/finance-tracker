import os, sys, csv, re, json  # Added json import
from crewai import Agent, Task, Crew, LLM, Process

def get_max_width_of_each_column(csv_dataaaa):
    fields = csv_dataaaa[0]
    max_width_of_each_column = {field: 3 for field in fields}

    for col_no in range(len(fields)):
        for row_no in range(len(csv_dataaaa)):
            cell_data = str(csv_dataaaa[row_no][col_no])
            if len(cell_data) > max_width_of_each_column[fields[col_no]]-2:
                max_width_of_each_column[fields[col_no]] = len(cell_data) + 2

    return max_width_of_each_column

def transformed_table(data_lines):
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        raise ValueError("\nGOOGLE_API_KEY environment variable not set. \nPlease set it as a secret in your GitHub repository. \nIf in command line/terminal, run the command: export GOOGLE_API_KEY='YOUR_API_KEY' ")

    llm = LLM(
        model="gemini/gemini-2.0-flash",
        temperature=0.5,
        api_key=GOOGLE_API_KEY
    )  # Fixed: Added missing closing parenthesis

    table_generator = Agent(
        role = "2D Array to ASCII Table Converter",
        goal = '''Given a 2D array (list of lists) called {csv_data}, convert it into a classic ASCII table for terminal/plain text viewing.
        The table must use pipes (|) to separate columns and dashes (-) for horizontal lines.
        Left-align all text columns. Right-align all numeric columns.
        Each column should be as wide as the values mentioned against the column name in {maximum_width_of_each_column}.
        Do not use Markdown table syntax. Do not center-align any columns.
        If {feedback} exists and is not "None", address these specific issues: {feedback}''',
        backstory = "You are an expert at formatting data into readable, fixed-width ASCII tables for terminal or plain text viewing. You only use ASCII with pipes and spaces for padding and alignment.",
        llm = llm,
        verbose = False
    )  # Fixed: Added missing closing parenthesis

    conformer = Agent(
        role = "Table Conformance Checker",
        goal = '''Given a table generated by the table_generator agent, verify that it strictly follows these rules:
        - Return ONLY a valid JSON object as your output, nothing else.
          Example: {"conforms": true/false, "issues": []}
        - Use pipes (|) to separate columns
        - Use dashes (-) for horizontal lines between header and data
        - Left-align text columns: DATE, DESCRIPTION, NOTES
        - Right-align numeric columns: S.NO, AMOUNT
        - Never center-align any columns
        - Set each column's width to its precomputed value from {maximum_width_of_each_column}
        - Pad cells with spaces to fill exact widths (no truncation)
        - Use pure ASCII characters only (no Markdown syntax)
        - Maintain consistent row structure
        - No multi-line cells or wrapped text
        ''',
        backstory = "You are a meticulous ASCII table auditor. Your expertise is in ensuring that tables for terminal or plain text viewing are perfectly aligned, readable, and strictly formatted according to classic ASCII standards. You enforce every rule without exception.",
        llm = llm,
        max_iter = 500,
        verbose = False
    )  # Fixed: Added missing closing parenthesis

    # Generator Task
    table_maker = Task(
        name="ASCII Table Generator",
        agent=table_generator,
        description='''Generate ASCII table from {csv_data} using max widths from {maximum_width_of_each_column}.
        If {feedback} exists and is not "None", address these issues: {feedback}''',
        expected_output="ASCII table string"
    )

    # Conformer Task
    check_task = Task(
        name="Table Conformance Check",
        agent=conformer,
        description='''Check this table for rule compliance: {table_maker.output}
        Rules:
        - Pipes (|) for columns, dashes (-) for header lines
        - Left-align: DATE, DESCRIPTION, NOTES
        - Right-align: AMOUNT, S.NO
        - Column widths: {maximum_width_of_each_column}
        - No Markdown/centering
        - Return ONLY a valid JSON object as your output, nothing else.
          Example: {"conforms": true/false, "issues": []}''',
        expected_output="A single line of valid JSON as described above, with keys: 'conforms' (bool) and 'issues' (list)"
    )

    crewww = Crew(
        agents=[table_generator, conformer],
        tasks=[table_maker, check_task],
        verbose = False,
        process = Process.sequential,
        chat_llm = llm
    )

    max_width_of_each_column = get_max_width_of_each_column(data_lines)
    max_retries = 3
    feedback = "None"  # Initialize with default value

    for attempt in range(max_retries):
        inputs = {
            "csv_data": data_lines,
            "maximum_width_of_each_column": max_width_of_each_column,
            "feedback": feedback
        }  # Fixed: Added missing closing brace

        try:
            result = crewww.kickoff(inputs=inputs)

            try:
                conform_result = json.loads(result.raw)
            except json.JSONDecodeError as e:
                # Try to extract JSON with regex
                match = re.search(r'\{.*\}', result.raw, re.DOTALL)
                if match:
                    try:
                        conform_result = json.loads(match.group(0))
                    except json.JSONDecodeError as e2:
                        feedback = f"JSON parsing error (even after regex): {str(e2)}"
                        print(f"❌ Attempt {attempt+1} failed. {feedback}")
                        continue
                else:
                    print(f"Non-JSON output from conformer: {result.raw!r}")
                    feedback = "Conformer did not return valid JSON."
                    print(f"❌ Attempt {attempt+1} failed. {feedback}")
                    continue

            # Fixed: Access conformer output correctly
            # The final result.raw contains the conformer's JSON output
            # conform_result = json.loads(result.raw)

            if conform_result.get('conforms', False):
                # Get the table from the first task output
                if hasattr(result, 'tasks_output') and len(result.tasks_output) >= 1:
                    final_table = result.tasks_output[0].raw
                else:
                    # Fallback - re-run just the generator
                    gen_crew = Crew(agents=[table_generator], tasks=[table_maker], verbose=False)
                    gen_result = gen_crew.kickoff(inputs=inputs)
                    final_table = gen_result.raw

                print("✅ Table generated successfully!")
                return final_table.strip('```')
            else:
                issues = conform_result.get('issues', ['Unknown conformance issues'])
                feedback = ", ".join(issues)
                print(f"❌ Attempt {attempt+1} failed. Issues: {feedback}")

        except json.JSONDecodeError as e:
            feedback = f"JSON parsing error: {str(e)}"
            print(f"❌ Attempt {attempt+1} failed. {feedback}")
        except Exception as e:
            feedback = f"Execution error: {str(e)}"
            print(f"❌ Attempt {attempt+1} failed. {feedback}")

    print("⚠️ Failed to generate valid table after all retries")
    # Return the last attempt's generator output as fallback
    try:
        if hasattr(result, 'tasks_output') and len(result.tasks_output) >= 1:
            return result.tasks_output.raw.strip('```').strip()
    except:
        pass
    return "Error: Could not generate table"

if __name__ == "__main__":
    curr_csv = ""

    for folders, _, files in os.walk("/Users/rakshita/dev/rakshita/finance-tracker/saved_files"):
        for file in files:
            if file[len(file)-4 : len(file)] == '.csv':
                curr_csv = ''.join(os.path.join(os.getcwd(), os.path.join(folders, file)).split('./'))
                break

    with open(curr_csv, mode='r', encoding='utf-8') as csv_file:
        csv_data = csv.reader(csv_file)
        data_lines = list(csv_data)

    resp_raw = transformed_table(data_lines)
    print(resp_raw)
